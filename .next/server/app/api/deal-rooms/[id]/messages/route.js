"use strict";(()=>{var e={};e.id=9497,e.ids=[9497],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},29854:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>h,patchFetch:()=>g,requestAsyncStorage:()=>c,routeModule:()=>m,serverHooks:()=>p,staticGenerationAsyncStorage:()=>l});var s={};r.r(s),r.d(s,{POST:()=>u});var o=r(73278),a=r(45002),n=r(54877),i=r(71309),d=r(95594);async function u(e,{params:t}){try{let{id:r}=await t,{content:s,userId:o,userName:a,userRole:n,attachments:u}=await e.json();if(!r||!s||!o||!a||!n)return i.NextResponse.json({error:"Missing required fields"},{status:400});let m=await (0,d.bG)(r,o,a,n,s,u);return i.NextResponse.json(m,{status:201})}catch(e){return console.error("Error sending message:",e),i.NextResponse.json({error:"Failed to send message"},{status:500})}}let m=new o.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/deal-rooms/[id]/messages/route",pathname:"/api/deal-rooms/[id]/messages",filename:"route",bundlePath:"app/api/deal-rooms/[id]/messages/route"},resolvedPagePath:"/Users/mac/Downloads/VentureHiveIntelligence/src/app/api/deal-rooms/[id]/messages/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:c,staticGenerationAsyncStorage:l,serverHooks:p}=m,h="/api/deal-rooms/[id]/messages/route";function g(){return(0,n.patchFetch)({serverHooks:p,staticGenerationAsyncStorage:l})}},95594:(e,t,r)=>{async function s(e,t,r,s,o,a,n){try{let i=new Date().toISOString(),d=`dr-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,u={id:`msg-${Date.now()}`,senderId:"system",senderName:"System",senderRole:"founder",content:`Deal room created between ${s} (Founder) and ${a} (Investor) for project "${t}".`,timestamp:i,isSystemMessage:!0},m={id:`act-${Date.now()}`,type:"user_joined",userId:"system",userName:"System",userRole:"founder",timestamp:i,details:{message:`Deal room created for project "${t}"`}};return{id:d,projectId:e,projectName:t,founderUserId:r,founderName:s,investorUserId:o,investorName:a,createdAt:i,updatedAt:i,status:"pending",terms:n||{},messages:[u],activities:[m],documents:[],isArchived:!1,lastActivity:i}}catch(e){throw console.error("Error creating deal room:",e),Error("Failed to create deal room")}}async function o(e){try{return null}catch(e){throw console.error("Error fetching deal room:",e),Error("Failed to fetch deal room")}}async function a(e,t,r){try{return[]}catch(e){throw console.error("Error fetching user deal rooms:",e),Error("Failed to fetch user deal rooms")}}async function n(e,t,r,s,a){try{let n=await o(e);if(!n)throw Error("Deal room not found");if("founder"===a&&n.founderUserId!==r||"investor"===a&&n.investorUserId!==r)throw Error("You do not have permission to update this deal room");let i=new Date().toISOString(),d={id:`act-${Date.now()}`,type:"term_update",userId:r,userName:s,userRole:a,timestamp:i,details:{previousTerms:n.terms,newTerms:t}},u={id:`msg-${Date.now()}`,senderId:"system",senderName:"System",senderRole:"founder",content:`${s} (${a}) updated the deal terms.`,timestamp:i,isSystemMessage:!0};return{...n,terms:t,activities:[...n.activities,d],messages:[...n.messages,u],updatedAt:i,lastActivity:i}}catch(e){throw console.error("Error updating deal terms:",e),Error("Failed to update deal terms")}}async function i(e,t,r,s,a){try{let n=await o(e);if(!n)throw Error("Deal room not found");if("founder"===a&&n.founderUserId!==r||"investor"===a&&n.investorUserId!==r)throw Error("You do not have permission to update this deal room");let i=new Date().toISOString(),d={id:`act-${Date.now()}`,type:"status_change",userId:r,userName:s,userRole:a,timestamp:i,details:{previousStatus:n.status,newStatus:t}},u={id:`msg-${Date.now()}`,senderId:"system",senderName:"System",senderRole:"founder",content:`${s} (${a}) changed the deal status from ${n.status} to ${t}.`,timestamp:i,isSystemMessage:!0};return{...n,status:t,activities:[...n.activities,d],messages:[...n.messages,u],updatedAt:i,lastActivity:i}}catch(e){throw console.error("Error updating deal status:",e),Error("Failed to update deal status")}}async function d(e,t,r,s,a,n){try{let i=await o(e);if(!i)throw Error("Deal room not found");if("founder"===s&&i.founderUserId!==t||"investor"===s&&i.investorUserId!==t)throw Error("You do not have permission to send messages in this deal room");let d=new Date().toISOString(),u={id:`msg-${Date.now()}`,senderId:t,senderName:r,senderRole:s,content:a,timestamp:d,isSystemMessage:!1,attachments:n};return[...i.messages],u}catch(e){throw console.error("Error sending message:",e),Error("Failed to send message")}}async function u(e,t,r){try{let s=await o(e);if(!s)throw Error("Deal room not found");if(s.founderUserId!==t&&s.investorUserId!==t)throw Error("You do not have permission to archive/unarchive this deal room");return{...s,isArchived:r,updatedAt:new Date().toISOString()}}catch(e){throw console.error("Error toggling archive status:",e),Error("Failed to update deal room archive status")}}r.d(t,{Hn:()=>s,Ii:()=>u,O_:()=>n,ZE:()=>a,bG:()=>d,dN:()=>o,wc:()=>i})}};var t=require("../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[7787,4833],()=>r(29854));module.exports=s})();