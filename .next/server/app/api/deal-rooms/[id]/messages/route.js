(()=>{var e={};e.id=1518,e.ids=[1518],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44148:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>g,routeModule:()=>c,serverHooks:()=>m,workAsyncStorage:()=>l,workUnitAsyncStorage:()=>p});var s={};t.r(s),t.d(s,{POST:()=>u});var o=t(96559),a=t(48088),n=t(37719),i=t(32190),d=t(48532);async function u(e,{params:r}){try{let t=r.id,{content:s,userId:o,userName:a,userRole:n,attachments:u}=await e.json();if(!t||!s||!o||!a||!n)return i.NextResponse.json({error:"Missing required fields"},{status:400});let c=await (0,d._z)(t,o,a,n,s,u);return i.NextResponse.json(c,{status:201})}catch(e){return console.error("Error sending message:",e),i.NextResponse.json({error:"Failed to send message"},{status:500})}}let c=new o.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/deal-rooms/[id]/messages/route",pathname:"/api/deal-rooms/[id]/messages",filename:"route",bundlePath:"app/api/deal-rooms/[id]/messages/route"},resolvedPagePath:"/Users/mac/Downloads/VentureHiveIntelligence/src/app/api/deal-rooms/[id]/messages/route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:l,workUnitAsyncStorage:p,serverHooks:m}=c;function g(){return(0,n.patchFetch)({workAsyncStorage:l,workUnitAsyncStorage:p})}},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},48532:(e,r,t)=>{"use strict";async function s(e){try{return null}catch(e){throw console.error("Error fetching deal room:",e),Error("Failed to fetch deal room")}}async function o(e,r,t,o,a){try{let n=await s(e);if(!n)throw Error("Deal room not found");if("founder"===a&&n.founderUserId!==t||"investor"===a&&n.investorUserId!==t)throw Error("You do not have permission to update this deal room");let i=new Date().toISOString(),d={id:`act-${Date.now()}`,type:"status_change",userId:t,userName:o,userRole:a,timestamp:i,details:{previousStatus:n.status,newStatus:r}},u={id:`msg-${Date.now()}`,senderId:"system",senderName:"System",senderRole:"founder",content:`${o} (${a}) changed the deal status from ${n.status} to ${r}.`,timestamp:i,isSystemMessage:!0};return{...n,status:r,activities:[...n.activities,d],messages:[...n.messages,u],updatedAt:i,lastActivity:i}}catch(e){throw console.error("Error updating deal status:",e),Error("Failed to update deal status")}}async function a(e,r,t,o,a,n){try{let i=await s(e);if(!i)throw Error("Deal room not found");if("founder"===o&&i.founderUserId!==r||"investor"===o&&i.investorUserId!==r)throw Error("You do not have permission to send messages in this deal room");let d=new Date().toISOString(),u={id:`msg-${Date.now()}`,senderId:r,senderName:t,senderRole:o,content:a,timestamp:d,isSystemMessage:!1,attachments:n};return{...i,messages:[...i.messages,u],updatedAt:d,lastActivity:d},u}catch(e){throw console.error("Error sending message:",e),Error("Failed to send message")}}async function n(e,r,t){try{let o=await s(e);if(!o)throw Error("Deal room not found");if(o.founderUserId!==r&&o.investorUserId!==r)throw Error("You do not have permission to archive/unarchive this deal room");return{...o,isArchived:t,updatedAt:new Date().toISOString()}}catch(e){throw console.error("Error toggling archive status:",e),Error("Failed to update deal room archive status")}}t.d(r,{MY:()=>s,_z:()=>a,c5:()=>n,g9:()=>o})},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},78335:()=>{},96487:()=>{}};var r=require("../../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[4447,580],()=>t(44148));module.exports=s})();