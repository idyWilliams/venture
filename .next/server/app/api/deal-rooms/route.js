"use strict";(()=>{var e={};e.id=1277,e.ids=[1277],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},83860:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>g,patchFetch:()=>f,requestAsyncStorage:()=>l,routeModule:()=>m,serverHooks:()=>h,staticGenerationAsyncStorage:()=>p});var o={};t.r(o),t.d(o,{GET:()=>u,POST:()=>c});var s=t(73278),a=t(45002),n=t(54877),i=t(71309),d=t(95594);async function u(e){try{let r=e.nextUrl.searchParams,t=r.get("userId"),o=r.get("role"),s=r.get("filter");if(!t||!o)return i.NextResponse.json({error:"User ID and role are required"},{status:400});let a=await (0,d.ZE)(t,o,s);return i.NextResponse.json(a)}catch(e){return console.error("Error fetching deal rooms:",e),i.NextResponse.json({error:"Failed to fetch deal rooms"},{status:500})}}async function c(e){try{let{projectId:r,projectName:t,founderUserId:o,founderName:s,investorUserId:a,investorName:n,initialTerms:u}=await e.json();if(!r||!t||!o||!s||!a||!n)return i.NextResponse.json({error:"Missing required fields"},{status:400});let c=await (0,d.Hn)(r,t,o,s,a,n,u);return i.NextResponse.json(c,{status:201})}catch(e){return console.error("Error creating deal room:",e),i.NextResponse.json({error:"Failed to create deal room"},{status:500})}}let m=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/deal-rooms/route",pathname:"/api/deal-rooms",filename:"route",bundlePath:"app/api/deal-rooms/route"},resolvedPagePath:"/Users/mac/Downloads/VentureHiveIntelligence/src/app/api/deal-rooms/route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:l,staticGenerationAsyncStorage:p,serverHooks:h}=m,g="/api/deal-rooms/route";function f(){return(0,n.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:p})}},95594:(e,r,t)=>{async function o(e,r,t,o,s,a,n){try{let i=new Date().toISOString(),d=`dr-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,u={id:`msg-${Date.now()}`,senderId:"system",senderName:"System",senderRole:"founder",content:`Deal room created between ${o} (Founder) and ${a} (Investor) for project "${r}".`,timestamp:i,isSystemMessage:!0},c={id:`act-${Date.now()}`,type:"user_joined",userId:"system",userName:"System",userRole:"founder",timestamp:i,details:{message:`Deal room created for project "${r}"`}};return{id:d,projectId:e,projectName:r,founderUserId:t,founderName:o,investorUserId:s,investorName:a,createdAt:i,updatedAt:i,status:"pending",terms:n||{},messages:[u],activities:[c],documents:[],isArchived:!1,lastActivity:i}}catch(e){throw console.error("Error creating deal room:",e),Error("Failed to create deal room")}}async function s(e){try{return null}catch(e){throw console.error("Error fetching deal room:",e),Error("Failed to fetch deal room")}}async function a(e,r,t){try{return[]}catch(e){throw console.error("Error fetching user deal rooms:",e),Error("Failed to fetch user deal rooms")}}async function n(e,r,t,o,a){try{let n=await s(e);if(!n)throw Error("Deal room not found");if("founder"===a&&n.founderUserId!==t||"investor"===a&&n.investorUserId!==t)throw Error("You do not have permission to update this deal room");let i=new Date().toISOString(),d={id:`act-${Date.now()}`,type:"term_update",userId:t,userName:o,userRole:a,timestamp:i,details:{previousTerms:n.terms,newTerms:r}},u={id:`msg-${Date.now()}`,senderId:"system",senderName:"System",senderRole:"founder",content:`${o} (${a}) updated the deal terms.`,timestamp:i,isSystemMessage:!0};return{...n,terms:r,activities:[...n.activities,d],messages:[...n.messages,u],updatedAt:i,lastActivity:i}}catch(e){throw console.error("Error updating deal terms:",e),Error("Failed to update deal terms")}}async function i(e,r,t,o,a){try{let n=await s(e);if(!n)throw Error("Deal room not found");if("founder"===a&&n.founderUserId!==t||"investor"===a&&n.investorUserId!==t)throw Error("You do not have permission to update this deal room");let i=new Date().toISOString(),d={id:`act-${Date.now()}`,type:"status_change",userId:t,userName:o,userRole:a,timestamp:i,details:{previousStatus:n.status,newStatus:r}},u={id:`msg-${Date.now()}`,senderId:"system",senderName:"System",senderRole:"founder",content:`${o} (${a}) changed the deal status from ${n.status} to ${r}.`,timestamp:i,isSystemMessage:!0};return{...n,status:r,activities:[...n.activities,d],messages:[...n.messages,u],updatedAt:i,lastActivity:i}}catch(e){throw console.error("Error updating deal status:",e),Error("Failed to update deal status")}}async function d(e,r,t,o,a,n){try{let i=await s(e);if(!i)throw Error("Deal room not found");if("founder"===o&&i.founderUserId!==r||"investor"===o&&i.investorUserId!==r)throw Error("You do not have permission to send messages in this deal room");let d=new Date().toISOString(),u={id:`msg-${Date.now()}`,senderId:r,senderName:t,senderRole:o,content:a,timestamp:d,isSystemMessage:!1,attachments:n};return[...i.messages],u}catch(e){throw console.error("Error sending message:",e),Error("Failed to send message")}}async function u(e,r,t){try{let o=await s(e);if(!o)throw Error("Deal room not found");if(o.founderUserId!==r&&o.investorUserId!==r)throw Error("You do not have permission to archive/unarchive this deal room");return{...o,isArchived:t,updatedAt:new Date().toISOString()}}catch(e){throw console.error("Error toggling archive status:",e),Error("Failed to update deal room archive status")}}t.d(r,{Hn:()=>o,Ii:()=>u,O_:()=>n,ZE:()=>a,bG:()=>d,dN:()=>s,wc:()=>i})}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),o=r.X(0,[7787,4833],()=>t(83860));module.exports=o})();