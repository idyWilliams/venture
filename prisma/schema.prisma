generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  FOUNDER
  INVESTOR
  ACCELERATOR
  GRANT_PROVIDER
  ADMIN
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  name               String
  password           String
  role               UserRole
  companyName        String?
  bio                String?
  profileImage       String?
  website            String?
  linkedin           String?
  twitter            String?
  openForContact     Boolean   @default(false)
  investmentStage    String[]
  investmentSectors  String[]
  investmentMinSize  Float?
  investmentMaxSize  Float?
  investmentHistory  String?   // JSON string of past investments
  reputationScore    Float?    @default(0)
  verificationStatus Boolean   @default(false)
  onboardingComplete Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  projects              Project[]            @relation("UserProjects")
  savedProjects         SavedProject[]
  projectViews          ProjectView[]        @relation("ViewerProjectViews")
  viewedProjects        ProjectView[]        @relation("ProjectOwnerViews") 
  comments              Comment[]
  sentRequests          ContactRequest[]     @relation("SenderRequests")
  receivedRequests      ContactRequest[]     @relation("RecipientRequests")
  notifications         Notification[]
  likedProjects         ProjectLike[]
  acceleratorPrograms   AcceleratorProgram[] @relation("AcceleratorManagers")
  managedDeals          DealRoom[]           @relation("DealManager")
  participatedDeals     DealRoom[]           @relation("DealParticipant") 
  createdGrants         Grant[]
  aiGeneratedInsights   AIInsight[]
}

model Project {
  id                String   @id @default(uuid())
  title             String
  description       String
  logo              String?
  pitch             String
  industry          String
  fundingStage      String
  fundingAmount     Float?
  equity            Float?
  website           String?
  demo              String?
  deck              String?
  founderUserId     String
  problemStatement  String?
  solution          String?
  targetMarket      String?
  businessModel     String?
  competitorAnalysis String?
  traction          String?  // JSON string with metrics
  team              String?  // JSON string with team members
  aiMatchScore      Float?   // AI-calculated match score
  aiInsights        String?  // JSON with AI-generated insights
  pitchDeckFeedback String?  // AI feedback on pitch deck
  marketSegments    String[] // Target market segments
  technicalStack    String[] // Technologies used
  aiTags            String[] // AI-generated tags for better matching
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  founder           User                @relation("UserProjects", fields: [founderUserId], references: [id])
  savedBy           SavedProject[]
  views             ProjectView[]
  comments          Comment[]
  likes             ProjectLike[]
  faqs              ProjectFAQ[]
  communityPosts    CommunityPost[]
  dealRooms         DealRoom[]          @relation("ProjectDealRooms")
  pitchReviews      PitchDeckReview[]
  acceleratorApps   AcceleratorApplication[]
}

model ProjectView {
  id         String   @id @default(uuid())
  projectId  String
  viewerId   String
  viewCount  Int      @default(1)
  lastViewed DateTime @default(now())
  
  // Relations
  project    Project  @relation(fields: [projectId], references: [id])
  viewer     User     @relation("ViewerProjectViews", fields: [viewerId], references: [id])
  owner      User     @relation("ProjectOwnerViews", fields: [projectId], references: [id], map: "ProjectView_ownerId_fkey")

  @@unique([projectId, viewerId])
}

model SavedProject {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model ProjectLike {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  projectId String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  project  Project  @relation(fields: [projectId], references: [id])
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
}

model ProjectFAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project  Project  @relation(fields: [projectId], references: [id])
}

model CommunityPost {
  id        String   @id @default(uuid())
  content   String
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project  Project  @relation(fields: [projectId], references: [id])
}

model ContactRequest {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  message     String
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sender    User     @relation("SenderRequests", fields: [senderId], references: [id])
  recipient User     @relation("RecipientRequests", fields: [recipientId], references: [id])
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  type        String   // view, comment, contact_request, like
  content     String
  isRead      Boolean  @default(false)
  relatedId   String?  // Could be projectId, commentId, etc.
  createdAt   DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

// AI features
model AIInsight {
  id           String   @id @default(uuid())
  userId       String
  content      String   // JSON containing the insight data
  insightType  String   // pitch_review, investor_match, market_analysis, etc.
  createdAt    DateTime @default(now())
  
  // Relations
  user         User     @relation(fields: [userId], references: [id])
}

model PitchDeckReview {
  id              String   @id @default(uuid())
  projectId       String
  deckUrl         String
  reviewContent   String   // JSON with structured feedback
  score           Float
  createdAt       DateTime @default(now())
  
  // Relations
  project         Project  @relation(fields: [projectId], references: [id])
}

// Deal Room
model DealRoom {
  id                String         @id @default(uuid())
  name              String
  projectId         String
  managerId         String
  status            String         // active, closed, pending
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  manager           User           @relation("DealManager", fields: [managerId], references: [id])
  project           Project        @relation("ProjectDealRooms", fields: [projectId], references: [id])
  participants      User[]         @relation("DealParticipant")
  documents         DealDocument[]
  conversations     DealMessage[]
}

model DealDocument {
  id           String   @id @default(uuid())
  dealRoomId   String
  name         String
  fileUrl      String
  uploadedBy   String
  documentType String   // term_sheet, contract, pitch_deck, etc.
  createdAt    DateTime @default(now())
  
  // Relations
  dealRoom     DealRoom @relation(fields: [dealRoomId], references: [id])
}

model DealMessage {
  id           String   @id @default(uuid())
  dealRoomId   String
  senderId     String
  content      String
  createdAt    DateTime @default(now())
  
  // Relations
  dealRoom     DealRoom @relation(fields: [dealRoomId], references: [id])
}

// Accelerator and Grants
model AcceleratorProgram {
  id              String               @id @default(uuid())
  name            String
  description     String
  startDate       DateTime
  endDate         DateTime
  applicationUrl  String?
  location        String?
  remote          Boolean              @default(false)
  equity          Float?
  funding         Float?
  managerId       String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  // Relations
  manager         User                 @relation("AcceleratorManagers", fields: [managerId], references: [id])
  applications    AcceleratorApplication[]
}

model AcceleratorApplication {
  id              String   @id @default(uuid())
  programId       String
  projectId       String
  status          String   // pending, accepted, rejected
  applicationDate DateTime @default(now())
  
  // Relations
  program         AcceleratorProgram @relation(fields: [programId], references: [id])
  project         Project            @relation(fields: [projectId], references: [id])
}

model Grant {
  id               String         @id @default(uuid())
  name             String
  description      String
  amount           Float
  deadline         DateTime
  eligibility      String
  applicationUrl   String?
  creatorId        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relations
  creator          User           @relation(fields: [creatorId], references: [id])
}
